#!/usr/bin/env jruby

ROOT = File.expand_path(File.dirname(__FILE__))
require "#{ROOT}/../lib/rta"
require "optparse"
require "drb"
require "pp"

class Option
  attr_accessor :port
  attr_accessor :sids
  attr_accessor :numses

  def initialize
    @numses = 1
  end
end

class RTAController
  attr_reader :session_manager

  def start_service(opt, session_class)
    @session_manager = RTA::SessionManager.new(opt.numses, session_class)
    DRb.start_service("druby://localhost:#{opt.port}", self)
    @session_manager.run
    DRb.thread.join
  end

  def stop_service
    DRb.stop_service
  end

  def command(command, opt)
    DRb.start_service
    rtactl = DRbObject.new_with_uri("druby://localhost:#{opt.port}")
    sm = rtactl.session_manager

    case command
    when "standby"
      sm.standby(opt.sids)
    when "go"
      sm.go(opt.sids)
    when "stop"
      sm.stop(opt.sids)
      if opt.sids.nil?
        rtactl.stop_service
      end
    end
  end
end

COMMANDS = ["start", "standby", "go", "stop"]

opt = Option.new
begin
  op = OptionParser.new
  op.banner = "Usage: #{File.basename($0)} [options] <command> [<file>]\n\n" +
              "Example: jruby #{File.basename($0)} -p 9000 -n 5 start example.rb\n" +
              "         jruby #{File.basename($0)} -p 9000 go\n" +
              "         jruby #{File.basename($0)} -p 9000 -s 3,4 standby\n" +
              "         jruby #{File.basename($0)} -p 9000 stop\n\n" +
              "Option: "

  op.on('-p', '--port=NUMBER', Numeric, 'specify port number') { |arg|
    opt.port = arg
  }
  op.on('-n', '--number=NUMBER', Numeric, 'specify number of sessions') { |arg|
    opt.numses = arg
  }
  op.on('-s', '--sid=SID_LIST', Array, 'specify session IDs (CSV)') { |arg|
    opt.sids = arg.map { |sid| sid.to_i }
  }
  op.on('-h', 'output help') {
    puts op.help
    exit 0
  }
  op.parse!

  raise "Missing command" if ARGV.size == 0
  raise "Invalid command: #{ARGV[0]}" unless COMMANDS.find { |com| com == ARGV[0] }
  raise "Missing port" unless opt.port
  raise "Missing file: #{ARGV[1]}" if ARGV[0] == "start" &&
                                      (ARGV[1].nil? || (! FileTest.exist?(ARGV[1])))

rescue OptionParser::ParseError => err
  STDERR.puts err.message
  STDERR.puts op.help
  exit 1
rescue
  STDERR.puts $! if $!.to_s != ""
  STDERR.puts op.help
  exit 1
end

command = ARGV[0]
filename = ARGV[1]
rtactl = RTAController.new

if command == "start"
  $INHERITORS = Array.new
  class RTA::Session
    def self.inherited(subclass)
      $INHERITORS << subclass
    end
  end

  load filename
  session_class = $INHERITORS[-1]
  session_class ||= RTA::Session

  rtactl.start_service(opt, session_class)
else
  rtactl.command(command, opt)
end

