== TPC-C Example on RTA

== Synopsis
RTA 上で TPC-C を実装したアプリケーション

== Description

TPC-C[http://www.tpc.org/tpcc/] Standard Specification Version 5.11 を実装.
全ての仕様を満たしているわけではないので, 正式な TPC-C スコアとしては使用できません.

== Usage

=== Setup

必要なオブジェクト(表, 索引, 制約など)を作成し, データをロードします.

1. DB 上にスキーマが無い場合は, 予め作成

   作成例:
     SQL> CREATE USER tpcc IDENTIFIED BY tpcc;
     SQL> ALTER USER tpcc ACCOUNT UNLOCK;
     SQL> GRANT connect, resource TO tpcc;

2. config/config.sh, config/config.yml を環境に合わせて変更

3. script/setup.sh を実行
     $ script/setup.sh

4. config.sh 中で指定したログ(SETUP_LOG で指定)にエラーが無いか確認

=== Run Test

tpcc.rb を RTA から実行します.
ログは log/tpcc_<日付>.log に出力されます.

1. config/config.yml を環境に合わせて変更

2. テスト開始(接続状態)
     $ rtactl -p 9000 -n 5 start tpcc.rb

3. トランザクション開始
     $ rtactl -p 9000 go

4. テスト終了
     $ rtactl -p 9000 stop

=== Teardown

作成したオブジェクト(表, 索引, 制約など)を削除します.

1. config/config.sh を環境に合わせて変更

2. script/teardown.sh を実行
     $ script/teardown.sh

3. config.sh 中で指定したログ(TEARDOWN_LOG で指定)にエラーが無いか確認

4. 必要に応じて DB 上からスキーマを削除
     SQL> DROP USER tpcc;

== Consistency Conditions

script/consistency_spec.rb で Standard Specification の
"3.3.2 Consistency Conditions" を満たしているか確認できます.
(RSpec のスペックファイルになっています.)

config/config.yml を環境に合わせて変更後に JRuby の RSpec から実行

  $ jruby -S rspec -c -fs script/consistency_spec.rb

== Author
Takashi Hashizume

== Copyright
Copyright (C) 2011 Takashi Hashizume
